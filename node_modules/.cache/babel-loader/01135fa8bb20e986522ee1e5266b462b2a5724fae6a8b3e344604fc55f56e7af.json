{"ast":null,"code":"import { useState, useRef, useMemo, useEffect, useCallback } from 'react';\nimport { useFreshRef } from './useFreshRef.js';\n\n// Gets value from localstorage\nfunction getValueFromLocalStorage(key) {\n  var _a;\n  if (typeof localStorage === \"undefined\") {\n    return null;\n  }\n  const storedValue = (_a = localStorage.getItem(key)) !== null && _a !== void 0 ? _a : \"null\";\n  try {\n    return JSON.parse(storedValue);\n  } catch (error) {\n    console.error(error);\n  }\n  return storedValue;\n}\n// Saves value to localstorage\nfunction saveValueToLocalStorage(key, value) {\n  if (typeof localStorage === \"undefined\") {\n    return null;\n  }\n  if (value === undefined) {\n    return localStorage.removeItem(key);\n  }\n  return localStorage.setItem(key, JSON.stringify(value));\n}\n/**\r\n * @param key Key of the localStorage object\r\n * @param initialState Default initial value\r\n */\nfunction initialize(key, initialState) {\n  const valueLoadedFromLocalStorage = getValueFromLocalStorage(key);\n  if (valueLoadedFromLocalStorage === null) {\n    return typeof initialState === \"function\" ? initialState() : initialState;\n  } else {\n    return valueLoadedFromLocalStorage;\n  }\n}\n/**\r\n * useLocalstorageState hook\r\n * Tracks a value within localStorage and updates it\r\n *\r\n * @param {string} key - Key of the localStorage object\r\n * @param {any} initialState - Default initial value\r\n * @see https://rooks.vercel.app/docs/useLocalstorageState\r\n */\nfunction useLocalstorageState(key, initialState) {\n  const [value, setValue] = useState(() => initialize(key, initialState));\n  const isUpdateFromCrossDocumentListener = useRef(false);\n  const isUpdateFromWithinDocumentListener = useRef(false);\n  const customEventTypeName = useMemo(() => {\n    return `rooks-${key}-localstorage-update`;\n  }, [key]);\n  useEffect(() => {\n    /**\r\n     * We need to ensure there is no loop of\r\n     * storage events fired. Hence we are using a ref\r\n     * to keep track of whether setValue is from another\r\n     * storage event\r\n     */\n    if (!isUpdateFromCrossDocumentListener.current || !isUpdateFromWithinDocumentListener.current) {\n      saveValueToLocalStorage(key, value);\n    }\n  }, [key, value]);\n  const listenToCrossDocumentStorageEvents = useCallback(event => {\n    var _a;\n    if (event.storageArea === localStorage && event.key === key) {\n      try {\n        isUpdateFromCrossDocumentListener.current = true;\n        const newValue = JSON.parse((_a = event.newValue) !== null && _a !== void 0 ? _a : \"null\");\n        if (value !== newValue) {\n          setValue(newValue);\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  }, [key, value]);\n  // check for changes across documents\n  useEffect(() => {\n    // eslint-disable-next-line no-negated-condition\n    if (typeof window !== \"undefined\") {\n      window.addEventListener(\"storage\", listenToCrossDocumentStorageEvents);\n      return () => {\n        window.removeEventListener(\"storage\", listenToCrossDocumentStorageEvents);\n      };\n    } else {\n      console.warn(\"useLocalstorageState: window is undefined.\");\n      return () => {};\n    }\n  }, [listenToCrossDocumentStorageEvents]);\n  const listenToCustomEventWithinDocument = useCallback(event => {\n    try {\n      isUpdateFromWithinDocumentListener.current = true;\n      const {\n        newValue\n      } = event.detail;\n      if (value !== newValue) {\n        setValue(newValue);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }, [value]);\n  // check for changes within document\n  useEffect(() => {\n    // eslint-disable-next-line no-negated-condition\n    if (typeof document !== \"undefined\") {\n      document.addEventListener(customEventTypeName, listenToCustomEventWithinDocument);\n      return () => {\n        document.removeEventListener(customEventTypeName, listenToCustomEventWithinDocument);\n      };\n    } else {\n      console.warn(\"[useLocalstorageState] document is undefined.\");\n      return () => {};\n    }\n  }, [customEventTypeName, listenToCustomEventWithinDocument]);\n  const broadcastValueWithinDocument = useCallback(newValue => {\n    // eslint-disable-next-line no-negated-condition\n    if (typeof document !== \"undefined\") {\n      const event = new CustomEvent(customEventTypeName, {\n        detail: {\n          newValue\n        }\n      });\n      document.dispatchEvent(event);\n    } else {\n      console.warn(\"[useLocalstorageState] document is undefined.\");\n    }\n  }, [customEventTypeName]);\n  const currentValue = useFreshRef(value, true);\n  const set = useCallback(newValue => {\n    const resolvedNewValue = typeof newValue === \"function\" ? newValue(currentValue.current) : newValue;\n    isUpdateFromCrossDocumentListener.current = false;\n    isUpdateFromWithinDocumentListener.current = false;\n    setValue(resolvedNewValue);\n    broadcastValueWithinDocument(resolvedNewValue);\n  }, [broadcastValueWithinDocument, currentValue]);\n  const remove = useCallback(() => {\n    localStorage.removeItem(key);\n  }, [key]);\n  return [value, set, remove];\n}\nexport { useLocalstorageState };","map":{"version":3,"names":["useState","useRef","useMemo","useEffect","useCallback","useFreshRef","getValueFromLocalStorage","key","_a","localStorage","storedValue","getItem","JSON","parse","error","console","saveValueToLocalStorage","value","undefined","removeItem","setItem","stringify","initialize","initialState","valueLoadedFromLocalStorage","useLocalstorageState","setValue","isUpdateFromCrossDocumentListener","isUpdateFromWithinDocumentListener","customEventTypeName","current","listenToCrossDocumentStorageEvents","event","storageArea","newValue","log","window","addEventListener","removeEventListener","warn","listenToCustomEventWithinDocument","detail","document","broadcastValueWithinDocument","CustomEvent","dispatchEvent","currentValue","set","resolvedNewValue","remove"],"sources":["/Users/benjin8or/Cisco Project/cisco-project/node_modules/rooks/dist/esm/hooks/useLocalstorageState.js"],"sourcesContent":["import { useState, useRef, useMemo, useEffect, useCallback } from 'react';\nimport { useFreshRef } from './useFreshRef.js';\n\n// Gets value from localstorage\r\nfunction getValueFromLocalStorage(key) {\r\n    var _a;\r\n    if (typeof localStorage === \"undefined\") {\r\n        return null;\r\n    }\r\n    const storedValue = (_a = localStorage.getItem(key)) !== null && _a !== void 0 ? _a : \"null\";\r\n    try {\r\n        return JSON.parse(storedValue);\r\n    }\r\n    catch (error) {\r\n        console.error(error);\r\n    }\r\n    return storedValue;\r\n}\r\n// Saves value to localstorage\r\nfunction saveValueToLocalStorage(key, value) {\r\n    if (typeof localStorage === \"undefined\") {\r\n        return null;\r\n    }\r\n    if (value === undefined) {\r\n        return localStorage.removeItem(key);\r\n    }\r\n    return localStorage.setItem(key, JSON.stringify(value));\r\n}\r\n/**\r\n * @param key Key of the localStorage object\r\n * @param initialState Default initial value\r\n */\r\nfunction initialize(key, initialState) {\r\n    const valueLoadedFromLocalStorage = getValueFromLocalStorage(key);\r\n    if (valueLoadedFromLocalStorage === null) {\r\n        return typeof initialState === \"function\"\r\n            ? initialState()\r\n            : initialState;\r\n    }\r\n    else {\r\n        return valueLoadedFromLocalStorage;\r\n    }\r\n}\r\n/**\r\n * useLocalstorageState hook\r\n * Tracks a value within localStorage and updates it\r\n *\r\n * @param {string} key - Key of the localStorage object\r\n * @param {any} initialState - Default initial value\r\n * @see https://rooks.vercel.app/docs/useLocalstorageState\r\n */\r\nfunction useLocalstorageState(key, initialState) {\r\n    const [value, setValue] = useState(() => initialize(key, initialState));\r\n    const isUpdateFromCrossDocumentListener = useRef(false);\r\n    const isUpdateFromWithinDocumentListener = useRef(false);\r\n    const customEventTypeName = useMemo(() => {\r\n        return `rooks-${key}-localstorage-update`;\r\n    }, [key]);\r\n    useEffect(() => {\r\n        /**\r\n         * We need to ensure there is no loop of\r\n         * storage events fired. Hence we are using a ref\r\n         * to keep track of whether setValue is from another\r\n         * storage event\r\n         */\r\n        if (!isUpdateFromCrossDocumentListener.current ||\r\n            !isUpdateFromWithinDocumentListener.current) {\r\n            saveValueToLocalStorage(key, value);\r\n        }\r\n    }, [key, value]);\r\n    const listenToCrossDocumentStorageEvents = useCallback((event) => {\r\n        var _a;\r\n        if (event.storageArea === localStorage && event.key === key) {\r\n            try {\r\n                isUpdateFromCrossDocumentListener.current = true;\r\n                const newValue = JSON.parse((_a = event.newValue) !== null && _a !== void 0 ? _a : \"null\");\r\n                if (value !== newValue) {\r\n                    setValue(newValue);\r\n                }\r\n            }\r\n            catch (error) {\r\n                console.log(error);\r\n            }\r\n        }\r\n    }, [key, value]);\r\n    // check for changes across documents\r\n    useEffect(() => {\r\n        // eslint-disable-next-line no-negated-condition\r\n        if (typeof window !== \"undefined\") {\r\n            window.addEventListener(\"storage\", listenToCrossDocumentStorageEvents);\r\n            return () => {\r\n                window.removeEventListener(\"storage\", listenToCrossDocumentStorageEvents);\r\n            };\r\n        }\r\n        else {\r\n            console.warn(\"useLocalstorageState: window is undefined.\");\r\n            return () => { };\r\n        }\r\n    }, [listenToCrossDocumentStorageEvents]);\r\n    const listenToCustomEventWithinDocument = useCallback((event) => {\r\n        try {\r\n            isUpdateFromWithinDocumentListener.current = true;\r\n            const { newValue } = event.detail;\r\n            if (value !== newValue) {\r\n                setValue(newValue);\r\n            }\r\n        }\r\n        catch (error) {\r\n            console.log(error);\r\n        }\r\n    }, [value]);\r\n    // check for changes within document\r\n    useEffect(() => {\r\n        // eslint-disable-next-line no-negated-condition\r\n        if (typeof document !== \"undefined\") {\r\n            document.addEventListener(customEventTypeName, listenToCustomEventWithinDocument);\r\n            return () => {\r\n                document.removeEventListener(customEventTypeName, listenToCustomEventWithinDocument);\r\n            };\r\n        }\r\n        else {\r\n            console.warn(\"[useLocalstorageState] document is undefined.\");\r\n            return () => { };\r\n        }\r\n    }, [customEventTypeName, listenToCustomEventWithinDocument]);\r\n    const broadcastValueWithinDocument = useCallback((newValue) => {\r\n        // eslint-disable-next-line no-negated-condition\r\n        if (typeof document !== \"undefined\") {\r\n            const event = new CustomEvent(customEventTypeName, { detail: { newValue } });\r\n            document.dispatchEvent(event);\r\n        }\r\n        else {\r\n            console.warn(\"[useLocalstorageState] document is undefined.\");\r\n        }\r\n    }, [customEventTypeName]);\r\n    const currentValue = useFreshRef(value, true);\r\n    const set = useCallback((newValue) => {\r\n        const resolvedNewValue = typeof newValue === \"function\"\r\n            ? newValue(currentValue.current)\r\n            : newValue;\r\n        isUpdateFromCrossDocumentListener.current = false;\r\n        isUpdateFromWithinDocumentListener.current = false;\r\n        setValue(resolvedNewValue);\r\n        broadcastValueWithinDocument(resolvedNewValue);\r\n    }, [broadcastValueWithinDocument, currentValue]);\r\n    const remove = useCallback(() => {\r\n        localStorage.removeItem(key);\r\n    }, [key]);\r\n    return [value, set, remove];\r\n}\n\nexport { useLocalstorageState };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}