{"ast":null,"code":"import { useEffect } from 'react';\nimport { noop } from '../utils/noop.js';\nimport { useFreshCallback } from './useFreshCallback.js';\n\n/**\r\n * A setTimeout hook that calls a callback after a timeout duration\r\n * when a condition is true\r\n *\r\n * @param callback The callback to be invoked after timeout\r\n * @param timeoutDelayMs Amount of time in ms after which to invoke\r\n * @param when The condition which when true, sets the timeout\r\n * @see https://rooks.vercel.app/docs/useTimeoutWhen\r\n */\nfunction useTimeoutWhen(callback) {\n  let timeoutDelayMs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  let when = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  let key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n  const freshCallback = useFreshCallback(callback);\n  useEffect(() => {\n    if (when) {\n      function internalCallback() {\n        freshCallback();\n      }\n      // eslint-disable-next-line no-negated-condition\n      if (typeof window !== \"undefined\") {\n        const timeout = window.setTimeout(internalCallback, timeoutDelayMs);\n        return () => {\n          window.clearTimeout(timeout);\n        };\n      } else {\n        console.warn(\"useTimeoutWhen: window is undefined.\");\n      }\n    }\n    return noop;\n  }, [timeoutDelayMs, when, key, freshCallback]);\n}\nexport { useTimeoutWhen };","map":{"version":3,"names":["useEffect","noop","useFreshCallback","useTimeoutWhen","callback","timeoutDelayMs","arguments","length","undefined","when","key","freshCallback","internalCallback","window","timeout","setTimeout","clearTimeout","console","warn"],"sources":["/Users/benjin8or/Cisco Project/cisco-project/node_modules/rooks/dist/esm/hooks/useTimeoutWhen.js"],"sourcesContent":["import { useEffect } from 'react';\nimport { noop } from '../utils/noop.js';\nimport { useFreshCallback } from './useFreshCallback.js';\n\n/**\r\n * A setTimeout hook that calls a callback after a timeout duration\r\n * when a condition is true\r\n *\r\n * @param callback The callback to be invoked after timeout\r\n * @param timeoutDelayMs Amount of time in ms after which to invoke\r\n * @param when The condition which when true, sets the timeout\r\n * @see https://rooks.vercel.app/docs/useTimeoutWhen\r\n */\r\nfunction useTimeoutWhen(callback, timeoutDelayMs = 0, when = true, key = 0) {\r\n    const freshCallback = useFreshCallback(callback);\r\n    useEffect(() => {\r\n        if (when) {\r\n            function internalCallback() {\r\n                freshCallback();\r\n            }\r\n            // eslint-disable-next-line no-negated-condition\r\n            if (typeof window !== \"undefined\") {\r\n                const timeout = window.setTimeout(internalCallback, timeoutDelayMs);\r\n                return () => {\r\n                    window.clearTimeout(timeout);\r\n                };\r\n            }\r\n            else {\r\n                console.warn(\"useTimeoutWhen: window is undefined.\");\r\n            }\r\n        }\r\n        return noop;\r\n    }, [timeoutDelayMs, when, key, freshCallback]);\r\n}\n\nexport { useTimeoutWhen };\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,SAASC,IAAI,QAAQ,kBAAkB;AACvC,SAASC,gBAAgB,QAAQ,uBAAuB;;AAExD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,cAAcA,CAACC,QAAQ,EAA4C;EAAA,IAA1CC,cAAc,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC;EAAA,IAAEG,IAAI,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI;EAAA,IAAEI,GAAG,GAAAJ,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC;EACtE,MAAMK,aAAa,GAAGT,gBAAgB,CAACE,QAAQ,CAAC;EAChDJ,SAAS,CAAC,MAAM;IACZ,IAAIS,IAAI,EAAE;MACN,SAASG,gBAAgBA,CAAA,EAAG;QACxBD,aAAa,EAAE;MACnB;MACA;MACA,IAAI,OAAOE,MAAM,KAAK,WAAW,EAAE;QAC/B,MAAMC,OAAO,GAAGD,MAAM,CAACE,UAAU,CAACH,gBAAgB,EAAEP,cAAc,CAAC;QACnE,OAAO,MAAM;UACTQ,MAAM,CAACG,YAAY,CAACF,OAAO,CAAC;QAChC,CAAC;MACL,CAAC,MACI;QACDG,OAAO,CAACC,IAAI,CAAC,sCAAsC,CAAC;MACxD;IACJ;IACA,OAAOjB,IAAI;EACf,CAAC,EAAE,CAACI,cAAc,EAAEI,IAAI,EAAEC,GAAG,EAAEC,aAAa,CAAC,CAAC;AAClD;AAEA,SAASR,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}