{"ast":null,"code":"import { noop } from '../utils/noop.js';\nimport { useRef, useState, useEffect, useCallback } from 'react';\nimport { useFreshCallback } from './useFreshCallback.js';\n\n// useSpeech.ts\nfunction useSpeech(options) {\n  const {\n    text,\n    language = \"en-US\",\n    voiceURI,\n    onEnd = noop,\n    volume = 1,\n    pitch = 1,\n    rate = 1\n  } = options;\n  const freshOnEnd = useFreshCallback(onEnd);\n  const speechRef = useRef(null);\n  const [isPlaying, setIsPlaying] = useState(false);\n  useEffect(() => {\n    if (speechRef.current && isPlaying) {\n      speechRef.current.text = text;\n      speechRef.current.lang = language;\n      speechRef.current.volume = volume;\n      speechRef.current.pitch = pitch;\n      speechRef.current.rate = rate;\n      if (voiceURI) {\n        const voices = window.speechSynthesis.getVoices();\n        const selectedVoice = voices.find(voice => voice.voiceURI === voiceURI);\n        if (selectedVoice) {\n          speechRef.current.voice = selectedVoice;\n        }\n      }\n    }\n  }, [text, isPlaying, language, voiceURI, volume, pitch, rate]);\n  const start = useCallback(() => {\n    if (!(\"speechSynthesis\" in window)) {\n      console.error(\"Web Speech API is not supported in your browser.\");\n      return;\n    }\n    if (speechRef.current) {\n      window.speechSynthesis.cancel();\n    }\n    speechRef.current = new SpeechSynthesisUtterance(text);\n    speechRef.current.lang = language;\n    speechRef.current.volume = volume;\n    speechRef.current.pitch = pitch;\n    speechRef.current.rate = rate;\n    if (voiceURI) {\n      const voices = window.speechSynthesis.getVoices();\n      const selectedVoice = voices.find(voice => voice.voiceURI === voiceURI);\n      if (selectedVoice) {\n        speechRef.current.voice = selectedVoice;\n      }\n    }\n    speechRef.current.onstart = () => setIsPlaying(true);\n    speechRef.current.onend = () => {\n      setIsPlaying(false);\n      freshOnEnd();\n    };\n    speechRef.current.onerror = () => setIsPlaying(false);\n    window.speechSynthesis.speak(speechRef.current);\n  }, [text, language, volume, pitch, rate, voiceURI, freshOnEnd]);\n  const pause = useCallback(() => {\n    if (window.speechSynthesis && isPlaying) {\n      window.speechSynthesis.pause();\n      setIsPlaying(false);\n    }\n  }, [isPlaying]);\n  const resume = useCallback(() => {\n    if (window.speechSynthesis && !isPlaying) {\n      window.speechSynthesis.resume();\n      setIsPlaying(true);\n    }\n  }, [isPlaying]);\n  const stop = useCallback(() => {\n    if (window.speechSynthesis) {\n      window.speechSynthesis.cancel();\n      setIsPlaying(false);\n    }\n  }, []);\n  return {\n    start,\n    pause,\n    resume,\n    stop,\n    isPlaying\n  };\n}\nexport { useSpeech };","map":{"version":3,"names":["noop","useRef","useState","useEffect","useCallback","useFreshCallback","useSpeech","options","text","language","voiceURI","onEnd","volume","pitch","rate","freshOnEnd","speechRef","isPlaying","setIsPlaying","current","lang","voices","window","speechSynthesis","getVoices","selectedVoice","find","voice","start","console","error","cancel","SpeechSynthesisUtterance","onstart","onend","onerror","speak","pause","resume","stop"],"sources":["/Users/benjin8or/Cisco Project/cisco-project/node_modules/rooks/dist/esm/hooks/useSpeech.js"],"sourcesContent":["import { noop } from '../utils/noop.js';\nimport { useRef, useState, useEffect, useCallback } from 'react';\nimport { useFreshCallback } from './useFreshCallback.js';\n\n// useSpeech.ts\r\nfunction useSpeech(options) {\r\n    const { text, language = \"en-US\", voiceURI, onEnd = noop, volume = 1, pitch = 1, rate = 1, } = options;\r\n    const freshOnEnd = useFreshCallback(onEnd);\r\n    const speechRef = useRef(null);\r\n    const [isPlaying, setIsPlaying] = useState(false);\r\n    useEffect(() => {\r\n        if (speechRef.current && isPlaying) {\r\n            speechRef.current.text = text;\r\n            speechRef.current.lang = language;\r\n            speechRef.current.volume = volume;\r\n            speechRef.current.pitch = pitch;\r\n            speechRef.current.rate = rate;\r\n            if (voiceURI) {\r\n                const voices = window.speechSynthesis.getVoices();\r\n                const selectedVoice = voices.find((voice) => voice.voiceURI === voiceURI);\r\n                if (selectedVoice) {\r\n                    speechRef.current.voice = selectedVoice;\r\n                }\r\n            }\r\n        }\r\n    }, [text, isPlaying, language, voiceURI, volume, pitch, rate]);\r\n    const start = useCallback(() => {\r\n        if (!(\"speechSynthesis\" in window)) {\r\n            console.error(\"Web Speech API is not supported in your browser.\");\r\n            return;\r\n        }\r\n        if (speechRef.current) {\r\n            window.speechSynthesis.cancel();\r\n        }\r\n        speechRef.current = new SpeechSynthesisUtterance(text);\r\n        speechRef.current.lang = language;\r\n        speechRef.current.volume = volume;\r\n        speechRef.current.pitch = pitch;\r\n        speechRef.current.rate = rate;\r\n        if (voiceURI) {\r\n            const voices = window.speechSynthesis.getVoices();\r\n            const selectedVoice = voices.find((voice) => voice.voiceURI === voiceURI);\r\n            if (selectedVoice) {\r\n                speechRef.current.voice = selectedVoice;\r\n            }\r\n        }\r\n        speechRef.current.onstart = () => setIsPlaying(true);\r\n        speechRef.current.onend = () => {\r\n            setIsPlaying(false);\r\n            freshOnEnd();\r\n        };\r\n        speechRef.current.onerror = () => setIsPlaying(false);\r\n        window.speechSynthesis.speak(speechRef.current);\r\n    }, [text, language, volume, pitch, rate, voiceURI, freshOnEnd]);\r\n    const pause = useCallback(() => {\r\n        if (window.speechSynthesis && isPlaying) {\r\n            window.speechSynthesis.pause();\r\n            setIsPlaying(false);\r\n        }\r\n    }, [isPlaying]);\r\n    const resume = useCallback(() => {\r\n        if (window.speechSynthesis && !isPlaying) {\r\n            window.speechSynthesis.resume();\r\n            setIsPlaying(true);\r\n        }\r\n    }, [isPlaying]);\r\n    const stop = useCallback(() => {\r\n        if (window.speechSynthesis) {\r\n            window.speechSynthesis.cancel();\r\n            setIsPlaying(false);\r\n        }\r\n    }, []);\r\n    return {\r\n        start,\r\n        pause,\r\n        resume,\r\n        stop,\r\n        isPlaying,\r\n    };\r\n}\n\nexport { useSpeech };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}